* 协同办公软件
** 易度云办公
http://everydo.com/
*** 易度文档管理
易度文档管理系统，为企业中的个人、小组以及部门提供海量文档资料的安全集中存储空间，支持文档的共享和审核协作管理，并提供强大的文档检索机制。通过易度文档管理系统，企业可以高效、快捷地解决文档的存储、文档的安全管理、文档的查找、文档的在线查看、文档的协作编写及文档发布控制等问题。
    集中可靠存储
    文件分类和搜索
    在线查看
    权限控制
    版本管理
    格式转换
    纸质文件扫描
    文档流程定制
精心设计，简单易用

一键安装，快速实施，轻松管理

人性化交互设计，批量上传下载，在线编辑，免培训上手
文件预览，文件转换

在线预览数十种文档、图纸

更可比较文档版本间差异，转换pdf，播放音视频
创新分类，强大搜索

特有的FaceTag多层标签分组

全文搜索、文件夹内搜索、组合搜索，彻底查找文件
放心使用，不被锁定

备份、回收站、多版本，文件不丢失

采用简单储存技术，文档资产不会被软件锁定，放心使用

**** 领域解决方案
    企业文档管理
    项目文档管理
    ISO文控解决方案
    文档防泄密
    产品设计和研发
    数字资产管理
    纸质文档数字化
**** 行业解决方案
    咨询、法律服务业
    教育行业
    金融保险
    政府、行政事业单位
    制造业
    媒体出版社
    设计研究院

*** 易度项目管理
易度项目： 互联网上的多方异地协作的项目管理软件团队协作紧密无间，多项目管理有条不紊

    跨地域、跨部门、跨组织的多方团队协作
    项目进度、项目工作量、项目费用的实时监控
    项目计划的分解、每项任务落实到个人，提升项目执行力
    以消息、邮件、短信通知到关注人，让沟通足够畅通
    项目知识、文档资料统一管理、方便查询和重用


    项目进度监控
    多方项目协作
    任务管理
    文件共享
    项目组员沟通
    费用和工时统计
    项目流程定制
互联网线上使用，随时随地项目沟通

互联网使用突破地域，不管您是在公司还是实施现场，随时随地项目沟通。
低成本、零风险，专业的项目管理软件

软件租用模式，每人每月15元的超低投入，即可使用一套专业的项目管理软件。
操作简单且易用，无须培训即可上手

追求简洁、精心设计的界面；采用Ajax技术，操作简单易用；无须培训即可上手。
客户和合作方可以参与协作，提升品牌

加强客户的沟通和协作，提升服务水平，增强企业品牌和市场竞争力。

**** 解决方案

    医疗/制药行业解决方案
    工程项目管理方案
    学校科研课题管理方案
    产品开发项目管理方案
    房地产开发项目管理方案
    广告传媒行业项目管理方案
    公益组织协作方案
    创业团队

*** 易度工作管理
易度工作管理

    提升企业执行力
    增强企业管控力
    构建企业信息化
    达成企业的战略和目标

企业纵向管理：部门管理

    提供独立的部门内上下级纵向管理
    包括计划、任务、报告管理
    部门经理轻松指定计划、分配和检查任务
    下级员工可执行、反馈、完成、汇报任务

横向管理：跨部门项目管理

    打破部门界限，跨部门参与横向管理
    各部门调出相关人成立项目组
    为项目团队构建虚拟的网上工作空间
    提供一组工具用来发布消息、分配处理任务、跟踪进度等

个人管理：个人工作台

    个人工作中心
    汇总个人部门和项目工作
    提供有消息、计划、任务、报告
    帮助进行个人管理
管理理念

    PDCA戴明环管理思想

戴明环的核心思想是PDCA循环，包括：计划（Plan）、实施（Do）、阶段（Check）、行动阶段（Action）。易度工作管理系统中，计划分解为任务执行，计划完成后会给出总结；每一个任务也必须检查和评分才真正完结；每个员工可以通过报告进行总结汇报。真正实现了戴明环中大环套小环，相互促进，不断提升的理念。

    计划任务报告体系

工作管理的核心是计划、任务、报告。围绕企业的目标和战略，逐层分解为子目标，最终细化为可执行的行动计划和详细任务，在执行过程中逐层反馈和控制，最终达成企业目标。

    矩阵式管理思想

企业管理主要包括组织结构层面的上下级纵向管理和跨部门协作的横向管理。易度提供了部门管理来支持企业纵向管理；同时提供项目管理来进行横向管理；另外，也为每个员工提供了个人工作台，帮助员工进行个人管理。

*** 易度办公解决方案

    ISO文控
    工作管理
    流程自动化
    知识管理
    档案管理
    课件管理
    分包项目评审系统
易度办公平台，具备高度的可定制性，能够轻松定制出各种领域和行业个性化的办公解决方案。
img/docs.gif

文档管理 edodocs.com

文档管理是知识型企业信息化的基础。

几乎任何一个业务系统都需要和文档管理集成。易度文档管理，是和公司各种业务紧密集成的全面文档管理解决方案
img/job.gif

工作管理 pdca.everydo.com

提升企业执行力，提升公司的管控能力。

基于戴明环，结合企业矩阵管理制度，建立以计划-任务-报告为核心的工作管理体系。
img/project.gif

项目管理 pm.everydo.com

多部门协作，地域分散，项目进度监控、费用工作量控制...

易度项目，包括项目流程控制、项目团队管理、项目执行力、项目资料管理等多方面的整体项目管理解决方案
img/protal.gif

企业信息门户

领导、员工、客户、代理商、合作伙伴，各种应用需求，一个易度，一个入口

易度是一个套件产品，是一个可无限扩展的平台，因此非常适合用作企业信息门户

企业流程自动化

小到请假、报销，大至合同项目审批，您还在走低效的手工流程吗?

通过建立电子流程，让企业管理电子化、规范化，让企业高效顺畅运转。

** 易度项目管理系统开源版
http://opensource.everydo.com/project/
http://code.google.com/p/everydo-project/
易度项目管理经典版于2010年3月正式开源。
只支持python2.4，易度已经发展为支持PaaS的全面工作平台，新易度采用基于类BSD协议的Zope3重新开发。
本软件采用类GPL的协议发布，您可以在GPL协议规定下自由修改、使用和发布软件，唯一额外的要求是，您需要在您的个人或者公司网站上放上易度的宣传链接，希望理解和配合。形式参考： http://everydo.com/common/spread.rst
** PLONE-内容管理系统
http://plone.org/
http://czug.org/
Plone是一个屡获大奖的专业内容管理系统。 InfomationWeek杂志称Plone是一个 “世界级的内容管理系统”； eWeek杂志2006年4月刊中，评定Plone是eWeek杂志研究室分析员推荐奖获得者，它是公司门户和内部网的最佳解决方案之一。

更加重要的是，Plone是一个开放源代码(opensource)软件，它使用GPL协议授权。这意味着，你可免费得到这个软件，包括全部的源代码，并可以自由的修改和再发布。 Plone的全部知识产权和商标，由非赢利的、社区控制的Plone基金会拥有和保护，自由软件法律中心的专家也为Plone提供法律支持。

作为一个通用的内容管理系统，Plone可用于传统的网站内容管理，如建立各种门户网站、公司内外网等；也可在企业内容管理领域使用，比如用作文档管理、知识管理、群件系统等；Plone更可作为一个应用开发的平台，可基于Plone，快速开发个性化的应用。

Plone发展很快。它的第一个公开版本发布于2001年10月，目前(2006年12月)的最新版本是Plone 2.5版。 Plone由全世界数百个开发人员在技术社区协同开发，一般每年发布2个大的版本。全世界数百个公司可以提供Plone的商业支持服务。

Plone拥有大量的在线文档可供查阅，活跃的技术讨论邮件列表和聊天室，Plone的用户可轻松寻求帮助。目前，有五本关于Plone的出版书籍，且被翻译成德语、日语和其它的一些语言。

一些大的组织机构，包括NASA, Oxfam, eBay, Trolltech, Nokia, Utah State University, Creative Commons和Wolford，他们都使用Plone作为内容管理。在国内，网易、上海航空公司等都在使用Plone.
** ZOPE-一个开源的web应用服务器
http://www.czug.org/zope/
Zope ( http://zope.org )，一个Python上的应用服务器。她比轻量级的web开发框架来得厚重，但远比J2EE开发简单。
现在很流行轻量级开发框架。在python社区，就有Django、Pylons、Quxiote等框架，简单易学好上手。做一个网站，费不了多少功夫就可以完成了，而且集成了很多最新的AJAX效果。

但是在某些情况下，我们需要面对更复杂的应用，需要考虑可重用性，需要组织大规模的开发。这时候，这些轻量级框架，可能就存在一些瓶颈了。比如企业级关键业务系统，比如银行交易等。在Java的世界里面，这些被认为是J2EE的专有领地，虽然有很多Java人不喜欢J2EE的过于复杂。

在Python的世界里面，是否有类似J2EE的企业开发框架？如果有，在以简洁漂亮著称的Python世界里面，他是否也会如同J2EE般的复杂？

恩，我来告诉你：有的，她就是Zope ( http://zope.org )，一个Python上的应用服务器。她比轻量级的web开发框架来得厚重，但远比J2EE开发简单。

Repoze: 让Zope融入Python世界

我们一直在说Zope厚重。这种厚重，让Zope在Python世界里很另类。很多习惯了简单的python开发人员，不大爱Zope的这种一眼望不见底。

Zope的很多的特性，包括认证、对象发布、事务管理、授权等，功能都很强大，但是几乎无法在Zope世界外使用，这样Zope世界显得有些封闭。

这个现象，其实也不是Zope独自存在的。Python上大量的web框架，大都是各自为政，彼此互通的很少。

WSGI是解决这一问题的途径。WSGI (Web Service Gateway Interface)，定义了Web服务器和Web应用以及Web中间件之间的交互协议。这样，只需要支持WSGI，那么各种web服务器、web应用和中间件，就能相互对接了。比如，你可轻松让你的网站wiki采用MoinMoin，而发布系统采用Plone.

而Repoze(http://repoze.org) 做了什么了呢？Repoze是一个 "拆卸工"，他把复杂/强大的Zope，逐一分解成一个个WGSI组件。这样，Zope基本消失了，Zope的强大特性，可以被Zope外的各种框架所使用。

目前，Zope的可插拔认证系统、Zope的事务管理、对象发布，均被Repoze给WSGI化重写了。Zope坚硬的外壳，已经被Repoze敲开，营养已经被Repoze所吸收，Repoze太狠了!

Repoze又推出了自己的开发框架repoze.bfg(http://static.repoze.org/bfgdocs/) ，这个是利用了ZCA的一个可以一眼见底"轻量级"开发框架，和pylons和Django有神似的地方。

Repoze.bfg实际上是Zope的一个分支，Repoze.bfg未来非常值得期待。虽然现在还处在早期，但是早有蜻蜓落上头，已经有很多应用基于Repoze.bfg开发了。我相信，Repoze是Zope的终极出路，是众望所归。

** PYTHON开发语言
http://www.python.org/
著名的自由软件作者Eric Raymond在他的文章《如何成为一名黑客》中，将Python列为黑客应当学习的四种编程语言之一，并建议人们从Python开始学习编程。这的确是一个中肯的建议，对于那些从来没有学习过编程或者并非计算机专业的编程学习者而言，Python是最好的选择之一。

虽然Python可能被粗略地分类为“脚本语言”（script language），但实际上一些大规模软件开发计划例如Zope、Mnet及BitTorrent，谷歌，facebook也广泛地使用它。Python的支持者较喜欢称它为一种高级动态编程语言，原因是“脚本语言”泛指仅作简单编程任务的语言，如shell script、JavaScript等只能处理简单任务的编程语言，并不能与Python相提并论。
　　此外，由于Python对于C和其他语言的良好支持，很多人还把Python作为一种“胶水语言”（glue language）使用。使用Python将其他语言编写的程序进行集成和封装。在谷歌内部的很多项目使用C++编写性能要求极高的部分，然后用Python调用相应的模块。

** 37signals
http://37signals.com/
37signals是一家私人控股的网络应用公司，总部设在美国伊利诺斯州芝加哥市， 贾森·弗莱德(Jason Fried)、恩尼斯特·
37signals37signals
基姆(Ernest Kim)、卡洛斯·西古拉(Carlos Segura)是其共同创始人，是一个创造简单、专一软件的小团队，其产品可以帮助用户协同工作和组织团队。37signals 对于很多 Geek 来说，是一家非常迷人的公司，他们是网络上的另类新星，曾被《连线》杂志评出2008年十大最值得关注创业公司。37Signals在web应用业界可谓是鼎鼎大名了，不仅仅有BaseCamp、Highrise、Backpack、Campfire等知名产品，同时还衍生出一本Web创业公司的经典书籍《Getting Real》。
*** Basecamp 
把项目管理作为首要问题。Basecamp提供了消息板，待办事宜，简单调度，协同写作，文件共享。而不是甘特图，炫丽的曲线图，和繁重的电子表格。目前，成千上万的人同意这是一种更好的方式。来自Salon.com的Farhad Manjoo说：“Basecamp代表了Web软件的未来。”
*** Campfire  
提供了业务模式下的简单群聊方式。实时持久的群聊对于业务来说非常重要。传统的实时聊天对于快速的一对一模式很有效。但是对于3个或者更多的人同时聊天来说异常痛苦。Campfire解决了此问题和其他相关问题。 Backpack 是一种替代那些玄乎，复杂，“通过25个步骤管理人生”之类的个人信息管理系统的产品。
*** Backpack
是一种替代那些玄乎，复杂，“通过25个步骤管理人生”之类的个人信息管理系统的产品。Backpack在页面，笔记，待办事宜，电话和电子邮件通知上的简单尝试，在受“statis-quo-itie”折磨的一类产品中，是一个独具匠心的创意。Wall Street Journal的Thomas Weber说它是同类产品中最出众的。 New York Times 的 David Pogue说它是一个“非常酷”的组织工具。
***Writeboard
使你能够撰写，分享，修订，和比较自己或者他人的文章。臃肿的文本处理工具，对于你95%的文字是功能过剩的，而Writeboard是一个全新的替代品。Web-guru Jeffrey Zeldman说：“37signals 的天才思想王者归来。”
*** Ta-da List
维护聚合你的所有待办清单，并且以在线方式组织。为你自己维护待办清单，或者通过和其他人分享来协作。没有更好的方式来搞定这些了。迄今为止，其创建了超过100，000个清单和1，000，000项行动。
*** Ruby on Rails
http://rubyonrails.org/
http://rubyforge.org/frs/?group_id=167
Ruby on Rails是一种结合Ruby语言与Rails平台的一种网页编程语言，Ruby语言以自然、简洁、快速著称，全面支援面向对象程序设计，而Rails则是Ruby广泛应用方式之一，在Rails平台上设计出一套独特的MVC开发架构，采取模型（Model）、视图（View）、控制器（Controller）分离的开发方式，不但减少了开发中的问题，更简化了许多繁复的动作。
于2004年7月，Rails的创始人大卫·海纳梅尔·韩森从37signals公司的项目管理工具Basecamp里面分离出Ruby on Rails，并且以开源方式发布。

Rails在发布以后的短短的时间内就迅速获得很多开发人员欢迎，大卫认为这归功于Rails设计为opinionated software。Rails当中有很多规矩从一开始就按照David的意见制定好了，所以在Rails上开发应用程序时，开发人员可以专注于应用程序自身的设计，省却那些花在了解及配置基础框架上面的时间。这也正是Rails很重要的精神“约定优于配置”，开发人员遵照Rails本身的惯例便可以省却配置组态档的时间；此外，Rails虽然强调惯例的重要及便利性，但针对不同的需求，Rails也提供修改的空间让开发人员可以进行自订的组态。

对于开发者来说，是一个用Ruby编写的全栈式的开源Web框架。其使得开发真是应用快速而简单。你可以关注在你的思想上面，而由Rails操心杂事。 O’Reilly的Nathan Torkington说：“Ruby on Rails太令人震撼了。使用它像是观赏一个功夫片，片中一堆流氓框架准备痛扁这个小新人，没想到却被各种充满想象力的方式揪住了屁股。”Gotta喜欢这段话。 
这里有一段 Ruby on Rails 的演示视频，非常值得一看。

http://media.nextangle.com/rails/rails_setup.mov

大家可以注意到该演示中的一个令人震撼的细节，在建立了名为 Post 的 model 之后，在数据库中建立一张叫做 posts 的表，而该 Post model 就可以以一种非常完美或者说完整的方式（完整的 CRUD 操作，Create，Retrieve，Update 及 Delete）控制 posts 表。这种控制甚至是带有某种智能的。在另外一个由 Ruby on Rails 提供的例子中，在建立了 Category model 之后，就可以实现对 categories 表的完全控制。

更进一步的话，只要有了系统的完整设计，比如一张完整的 E-R 图的话，你就可以在 Rails 中让其自动生成所有的 CRUD 的 Models，Views 和 Controllers，你就可以在此基础上完善这些已经生成的脚本（都是使用 Ruby 语言写成，非常简洁，而且非常易懂），来完成你的 Web Application。而且 Rails 还提供了非常多的内置方法来加速你的开发（具体参看 Rails 的文档），在这些众多的内置方法中，甚至包括了相当数量的用于加速 AJAX 开发的内置方法。

这一切，都从各个方面证明了，Ruby on Rails 是目前最好的 MVC 模式的 Web Development Framework！因为实在是没有比这个更加强大和方便的 Framework 了。

但除此之外，也有一些问题不得不考虑。

就是，之前的一些基于传统思想（比如面向过程的 PHP + MySQL）所开发的系统，转换到此 Framework 上将代价很大。因此 Ruby on Rails 更适合于去开发新的应用。并且，Ruby on Rails 将可以最大程度地缩短开发新的应用的时间！
**** Ruby
http://www.ruby-lang.org
Ruby，一种为简单快捷面向对象编程而创的脚本语言，在20世纪90年代由日本人松本行弘开发，遵守GPL协议和Ruby License[1]。它的灵感与特性来自于Perl、Smalltalk、Eiffel、Ada以及Lisp语言。由Ruby语言本身还发展出了JRuby（Java平台）、IronRuby（.NET平台）等其他平台的Ruby语言替代品。 
*** 37signals - 架构
37Signals 在 Signal vs. Noise 上披露了比较详细的运营数据，Ask 37signals: Numbers?
存储数据量 截止到 2007 年 11 月，
总存储量统计： * 5.9 T 用户上传的数据 * 888 GB 上传文件 (900,000 请求) * 2 TB 文件下载 (8,500,000 请求) 这包括 Basecamp、Highrise、BackPack、Campfire总的数据统计。
总的用户量其实并不多，只有 200 万。
37signals37Signals VS. SalesForce
这些数据存放在 Amazon S3 上，37Signals 用了这个服务已经一年多了，他们对此比较满意。事实上，Amazon S3 已经成为 Web 2.0 分布式存储的既定事实的解决方案。
 服务器状况 37Signals 当前正在部署虚拟化软件产品，当然不用 VMware，而用开源的 Xen。当前大约有 30 台服务器，从单 CPU 的文件服务器到 8 CPU 的应用服务器都有，总共 100 颗 CPU、200GB 内存。预计 XEN 部署完毕后，服务器数量降低到 16 台，92 颗更快的 CPU、230GB 的内存量。这样做的主要目的是管理起来更方便(至于性能是否更好，我个人还是有点怀疑的--Fenng)。
 关心 ROR 以及具体一些策略具体实现的朋友不防去看看那个帖子下面的留言。 之前还真的很少有听说哪家 Web 2.0 公司部署 XEN 的，37signals 的这个动作或许是个积极的信号。2007 年也是个"虚拟化"年，相信随着虚拟化的技术成熟，开源力量的壮大，会有更多的公司收益于 XEN 虚拟化架构.

*** 37signals - 《Getting Real》
37signals创造了内部开发的敏捷方法，并形成WEB2.0创业的经典读物《Getting Real》 。在这套方法论中使用及时快速的编程方法，并着重于创造有益的阿尔法软件的小团队，然后遍历一个简单有用的应用基础，一部分是对现实世界的客户反馈。该公司最初没有接触风险资本，坚持“自筹资金启动”，不过现在已经采取取得了来自投资杰夫贝佐斯的投资。
Getting Real是关于省略所有表达现实（图表，曲线，矩形，箭头，统计图），而构建现实。
Getting real 是追求精炼。更少的代码量，更少的软件，更少的功能，更少的文档工作，更少无所谓的东西（而且大部分你认为必要的，其实不是）。 * Getting Real 是保持精益，变得敏捷。
Getting Real从界面开始，也就是用户使用的屏幕。它从实际的用户体验开始，并且构建似曾相识的体验。这让你在软件误入歧途之前得到正确的用户界面。
Getting Real 是关于迭代和降低变化成本的方法。Getting Real基本上是关于上线，调整，持续改进，其目标的开发Web软件的最佳途径。
Getting Real只交付客户所需的，摒弃任何客户不需要的。
Getting Real的优点
 Getting Real能够交付更好的结果，是因为它强迫你处理真正要解决的问题，而不是关于那些问题的空想。它迫使你面对当下。
Getting Real更注重实际的用户界面，而不是功能规格说明书和其他昙花一现的文档。只有当一个真实的网页呈现出来，相关的功能规格才是可信的，被证明是可接受的。那才是是我们的客户将要看到和使用的。那才是需要关心的。
Getting Real帮助你更快达到这个目的。并且那意味着你正在基于真实需求，而不是异想天开来构建软件。 最后，Getting Real是适合于Web软件的理想途径。那种把软件包装在盒子里，再等一年到两年才发布一个更新的学院派方法已经过时了。不像需要安装的软件，Web应用能够以天为单位持续改进。
Getting Real利用了这种优势来提升Web应用的价值。 

*** 37 Signals的实用最小主义实践

作者 Scott Rosenberg，译者：韩磊 发布于 2008年8月1日 上午2时1分

尽管有那些可能性——复杂度、延误和不可预知的改动——还是有许多软件写出来、交付出去、而且最终被使用。偶尔软件会很好。在一些罕见情形下，软件的确有创新和价值。在一些案例中，还真按计划达成了目标。

在这些稀有案例中，成功往往是铁一般纪律的副产品——一种坚决做出又在每次遇到挑战时大声重申的选择，限制着项目的范围。在软件的成功故事中，你总 能发现善于拒绝的人们。如同有意只在调色板上涂抹一种颜色的画家、宁肯写十四行诗也不写自由体诗歌的诗人，或者只固守小规模优势产品线的厂商一样，成功的 程序员也在约束中成长，而非没有约束。有时候，约束是环境的产物——预算少、时间紧、目标有限。有时，约束是有经验的程序员或经理强加给自己的，他们懂得 如何避开结局不可预料的——以软件界的说法来讲，“未绑定的”——项目。无论哪种情形，都更多地考虑“大即险”，而不是“小即美”。
约束是打造伟大产品的关键

有家位于芝加哥、名为37 Signals的小公司，正是这种拥抱限制的方式之代表者。37 Signals最初是一家网页设计资讯公司，后来为了满足自身需求而将业务扩展到软件开发领域。他们编写了一些用于项目管理的内部工具。为了和客户沟通， 就向客户开放了部分系统。公司创始人和总裁杰森•弗瑞德（Jason Fried）解释说，在他们自己意识到之前，已经做出了一套基于网页的应用。又做了4个月，他们把软件转换为称作Basecamp的服务。 Basecamp发布于2004年2月，很快在类似Flickr和Google的Gmail等新Web富应用天堂中名列前茅。

Basecamp只是这家公司花一年多时间投入少量程序员做出来的一系列值得注意的小而精的产品之一。Basecamp之后是Ta-da List，用于保存和共享待办事项（及类似事项）列表。几个月后推出了Backpack，它允许用户保存和共享便签及文件。每种产品都可靠并易于使用，而 且都是精心设计的。每种产品通常也都只包括少量新特性。例如，Basecamp就有一些精巧的电子邮件功能：和其他服务和程序一样，也可以设置邮件到达提 醒——还可以从另外的计算机或手机等移动设备向Backpack网页发送邮件，邮件文本就会在页面上显示出来。

我刚开始使用Backpack时，是用来保存本书的零散调研笔记。2004年秋天在一个技术大会上偶遇弗瑞德，我问他37 Signals怎么能在如此之短的时间内做出这么有用的软件。他大力鼓吹自己的方法——他公司开了个名为“制作Basecamp”的训练班，将所用原则做 成了一套PowerPoint幻灯片——而且逼着我在酒店大堂里听了45分钟关于其方法论的概要介绍。

首先，37 Signals只有一位开发者，所以就避开了布鲁克斯法则的泥沼——就像米奇•卡普尔最初做Lotus 1-2-3那样，当时也只有乔纳森•萨赫斯（Jonathan Sachs）一位程序员。开发者之间的协调不成问题。37Signals唯一的开发者戴维•海因梅尔•汉森（David Heinemeyer Hansson）住在丹麦，就连这似乎也不成问题。弗瑞德说，在大多数公司里，地理上的分隔会被看做是严重问题，不过时差却让他们真的只有区区几个小时可 以讨论，所以他们会高效利用这点时间，跟着开发者们就能平心静气地写代码，不受干扰。

照37 Signals的做法，约束是朋友。“约束是打造伟大产品的关键，”弗瑞德说，“约束产生创意。如果有人说，给你全世界的财富，让你做任何想做的东西，那这东西多半永远发布不了。给我一个月就好！”
实用最小主义的基础——Web应用

37 Signals生产优秀软件的另一关键要素是紧抓Web应用不放。所有东西都通过网页浏览器运行，所以程序可以在任何能运行浏览器的计算机和操作系统上工 作。版本更新可以很容易地在运行服务的服务器上做到，用户无须下载和安装更新。汉森还热衷于Ruby，一种面向对象动态编程语言。Ruby近似于 Python，不过较少为人知，汉森发现它简化了自己的工作。最后，37 Signals的方式还避开了编写规约的环节；相反，一开始就做用户将看到的详细网页。这些页面设计成了规约。弗瑞德说，他的团队很少会长时间争辩页面上 的每个词、按钮和方块。

37 Signals只做小程序，不做野心勃勃的新平台或应用程序框架。但在打造Basecamp的过程中，汉森还写了一些有用的创新代码，改善和简化了所有 Web应用在保存和获取数据时都要执行的细节基础操作。Basecamp发布后，他和37 Signals决定把这部分工作拿出来，作为一套开源平台发布，名字是Ruby on Rails。这套将被命名为Rails的框架在某种程度上通过约束程序员的可选手段使得编写Web应用更为简单。“灵活性被过分高估——约束才是解放，” 汉森说。Rails也具备实现AJAX风格增强界面的能力，这种新界面风格让基于Web的程序足以与桌面应用抗衡。

37 Signals从Basecamp中抽出Rails的同时，还从Basecamp的经验中归纳出一套设计哲学，体现为一系列小警句：“精简代码。”“拒绝 在先。”“找对人。”“与其做半成品，不如做功能减半的优质品。”这些短句是为了通过幻灯片快速演示，不过合起来却是一整套软件开发方法——姑且称之为实 用最小主义。它也许不能满足鼓舞了如此多程序员的改变世界之瘾。你也可以批评它是锋芒尽失的表现。它看似不适用于那些别无选择只能做大的软件。用程序员们 的话来说，就是“配不上”。
Google也实用最小主义

不过依据37 Signals一直以来的跟踪记录，有个最大的推荐理由：它的行事方式看来的确有效。类似的方式在一家规模更大、也更为著名的软件公司中已经获得空前成功 ——甚至可以不太夸张地说，获得了改变世界式的成功。Google遵循一种听起来很像杰森•弗瑞德推崇的那种软件开发哲学，成长为规模达数十亿美元的巨 兽，并且开始挑战微软：每个新项目专设一个小团队，开发期限紧迫，做出目标集中的网页产品，然后再根据用户反馈和领域经验加以逐步改进。Google也让 开发者把五分之一的工作时间花在个人项目上。这“20%时间”的劳动成果可能会变成很酷的新产品——或者不会。不用担心，Google安抚员工说：尽管开 干，挠你自己的痒处。

Google因打造了工程师天堂而获得赞誉，算法称王、编码者说了算。那些有幸受雇于Googleplex的人——包括安迪•赫兹菲尔德和2005 年加入的Python发明人圭多•范•罗萨姆——暂时在这里逃离了软件时间的困境。Google做出过一些半成品，但无人能质疑其成功的价值——从最初的 搜索引擎到基于关键字的广告业务，以及流行的新免费电子邮件服务。

实用最小主义在Google用得很好。而且它现已成为一家声名显赫的公众公司，面对着跟上成长步伐和找到新收入来源的压力。对于许多人来说，看似 Google正在一手制造硅谷的新泡沫。如果它在这种情形之下坚守其方法论，想出如何在不变慢、不变笨的前提下成长得更大，那么它将是软件业历史上独一无 二的。

